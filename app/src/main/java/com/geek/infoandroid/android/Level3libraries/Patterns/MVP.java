package com.geek.infoandroid.android.Level3libraries.Patterns;
//появился вначале 90 для C++
//1)view+interface ,2)presenter + interface 3) model
public class MVP {
/*
//НЕОБХОДИМО ПРЕЗЕНТОР ДЕЛАТЬ ДЛЯ КАЖДОЙ ВЬЮ СВОЙ(Т.Е каждому фрагменту или активити создавать презентор)


    1)Model-так и осталась,отвечает за данные и работу с бд с сетью с бизнес логикой
    2)View- отображает кнопки списки и тд и уведомляет презентор о пользовательских действиях
    3)Presenter - связующее звено между вью и моделью(извлекает данные из модели и управляет нашей вью(решает что отображать и какую часть экрана обновлять))

2 реализации
    passive view
        1)View ничего не знает о модели 2)не содержит логики 3)умеет только отображать данные и реагировать на пользоваетля

    Supervising Controller
    1)вью может знать о моделе(может быть ссылка на моель во вью)
    2)вью отвечает за связывание данных с изображением(допустим в методы типа btn.setText(value)приходило не только 1 значение, а несколько данный ,например int мин,int сек,int час)
*/
}
